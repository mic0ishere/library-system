// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  userId          String           @unique
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime         @default(now())
  isBanned        Boolean          @default(false)
  accounts        Account[]
  sessions        Session[]
  books           Book[]
  previousRentals PreviousRental[]
}

model Book {
  id         String           @id @default(cuid())
  title      String
  author     String
  year       String
  pages      Int
  isbn       String
  status     EnumStatus       @default(AVAILABLE)
  rentedAt   DateTime?
  dueDate    DateTime?
  returnedAt DateTime?
  rentals    PreviousRental[]
  rentedById String?
  rentedBy   User?            @relation(fields: [rentedById], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model PreviousRental {
  id         String    @id @default(cuid())
  bookId     String
  userId     String
  rentedAt   DateTime
  dueDate    DateTime
  returnedAt DateTime?
  book       Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookId, userId, rentedAt], name: "unique_rental")
}

enum EnumStatus {
  AVAILABLE
  BACK_SOON
  RENTED
  NOT_AVAILABLE
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
